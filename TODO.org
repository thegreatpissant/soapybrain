* TODO Var system
* TODO EventQueue system
** Event Queue types
   - CREATE
   - REMOVE
   - MOVE
   - INPUT KEYBOARD
   - INPUT TRACKER
   - INPUT MOUSE
   - INPUT TOUCH
   - INPUT ANY
   - NETWORK
** Problems
   - Smoothness of input from multiple keys
   - Pull vs Push from input devices
   - Timestamps within Frametime
   - Require assignable event chain
* TODO Game loop / Timmer
* Render system
** Shaders and required variables
** Display attributes
- Aspect ration
- FOV
- Output device(s)
** Ways to reference the model assets
   Entities require a way to associate themselves with models in the
   render system.  Do we use:
   - Pointers: fastest, but could break. This nullifies the design
     holdup a second
   - Some sort of ID lookup, string or numeric fasion: Lookup
     overhead, less likley to break.
   - Hybrid:
* TODO Scene Graph
  - Contains a positional representation of all entities in the world.
  - Used to determine who gets drawn at the current time.
  - Tells the entities to draw themsleves or tells the renderer to draw
    this set of entities
* TODO Asset manager
** Sounds
** Load Models from files
* Models
  A very broad term, Render physics, collision, sound.  Im sure there
  are more.  It gives us a way to perform these calculations somewhat
  quickly on entities.
** Discussion
   Require more information on how far to break this stuff out.
** Render Models
   What awe use to provide a visual representation of physical objects
   in a virtual world.
*** TODO Types
    - Load from equations
    - Load from files
*** Requirements
    - Points
    - Keyframes
    - Orientation
** TODO Collision Models
* Example Progress
  Most of these originated from the ex15_1.cpp file and brought in new
  ideas as I went along.
** exj_2
   - Proved the queue system
** exj_3
   - Broke out different model types.
   - Added a simple render system.
   - Added a entity class with camera and actor subs
** TODO exj_4
*** Come back into more OpenGL related items from book
*** Concentration on learning shaders
*** Concentrate on render model representation
*** Color support
*** Texture support
*** Get mouse integration
*** Gameloop/Timer integration
* Future Application Ideas
  Should inspiration come my way from this stuff put results here.
** Implement a version of Mathographics computer examples
** Give it oculus support
* Game state
  Indicates state for the current point in the lifetime of the
  simulation.  Once the current state snapshot is sent to the render
  system that snapshot then remains static until the next state
  snapshot identified and created.  All systems are feed the
  information to act on and generate the next state snapshot.
** Game state: World is tied to one of the following
   - Ticks of processor time, jiffies lapsed
   - Ticks of real time, ms lapsed
   - A single work item, one round of work performed or computation.
** Snapshot of the world
   - Just like in the game of life.
   - You have
     - current
     - next obtained from that current
   - Then swap
** This will feed into other systems.
   - Where does this state live?
   - In Assets?
     - Data now lives out in classes
     - Manipulation systems request access from asset directly
   - In Systems?
     - Data is centralized to that system
     - Association links need maintained

* Load Variables
  - Examples:
    - Setting screen description
    - Player name
    - Full screen Y/N
    - Audio type
  - Types:
    - Numbers
    - Strings
  - Contain a hard coded default
  - May be overridden by a file
  
* Render Context
* Load intro screen
* Load assets
  - Main repository of assets
    - Models
    - Textures
    - Sounds
    - Scripts
    - Shaders
    - Maps
    - AI
  - Reference the repository and make copies
* Initiate Game
* Check options
* Launch game
* Game loop 
  - Identify Discrete Steps
  - Create Time line of events
  - execute events
    - Create
    - Destroy
    - Start
    - Stop
  - Perform physics
  - Render
* Shutdown loop
* Release assets
* Exit
